for RR code :
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int pid;        // process ID
    int at;         // arrival time
    int bt;         // burst time
    int rt;         // remaining time
    int wt;         // waiting time
    int tat;        // turnaround time
    int ct;         // completion time
} process;

int main() {
    int n, quantum;
    float avg_wt, avg_tat, throughput;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    process *procs = (process*) malloc(n * sizeof(process));
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i+1);
        scanf("%d %d", &procs[i].at, &procs[i].bt);
        procs[i].pid = i+1;
        procs[i].rt = procs[i].bt;
    }
    printf("Enter time quantum in milliseconds: ");
    scanf("%d", &quantum);

    int t = 0, completed = 0;
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (procs[i].rt > 0) {
                if (procs[i].rt <= quantum) {
                    t += procs[i].rt;
                    procs[i].rt = 0;
                    completed++;
                    procs[i].ct = t;
                    procs[i].tat = procs[i].ct - procs[i].at;
                    procs[i].wt = procs[i].tat - procs[i].bt;
                } else {
                    t += quantum;
                    procs[i].rt -= quantum;
                }
            }
        }
    }

    // calculate average waiting time, turnaround time, and throughput
    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += procs[i].wt;
        total_tat += procs[i].tat;
    }
    avg_wt = total_wt / n;
    avg_tat = total_tat / n;
    throughput = (float) n / t;

    // print schedule with waiting time and response time
    printf("P\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", procs[i].pid, procs[i].at, procs[i].bt, procs[i].ct, procs[i].tat, procs[i].wt);
    }

    // print average waiting time, turnaround time, and throughput
    printf("Average Waiting Time: %.2f\n", avg_wt);
    printf("Average Turnaround Time: %.2f\n", avg_tat);
    printf("Throughput: %.2f\n", throughput);

    free(procs);
    return 0;
}


#############################################################################################################################################################################################################################################
for FCFS code:




#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int waiting_time;
    int response_time;
} process;

int main() {
    int num_processes;

    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    process *processes = (process*) malloc(num_processes * sizeof(process));

    // Input process information
    for (int i = 0; i < num_processes; i++) {
        printf("Enter arrival time and burst time for process %d: ", i+1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].pid = i+1;
        processes[i].waiting_time = 0;
        processes[i].response_time = -1;
    }

    // Sort processes by arrival time
    for (int i = 0; i < num_processes-1; i++) {
        for (int j = i+1; j < num_processes; j++) {
            if (processes[j].arrival_time < processes[i].arrival_time) {
                process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    // Run processes
    int current_time = 0;
    for (int i = 0; i < num_processes; i++) {
        processes[i].waiting_time = current_time - processes[i].arrival_time;
        if (processes[i].response_time == -1) {
            processes[i].response_time = current_time - processes[i].arrival_time;
        }
        current_time += processes[i].burst_time;
    }

    // Calculate average waiting time, response time, and throughput
    float avg_waiting_time = 0, avg_response_time = 0;
    for (int i = 0; i < num_processes; i++) {
        avg_waiting_time += processes[i].waiting_time;
        avg_response_time += processes[i].response_time;
    }
    avg_waiting_time /= num_processes;
    avg_response_time /= num_processes;
    float throughput = num_processes / (float) current_time;

    // Print schedule and results
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tResponse Time\n");
    for (int i = 0; i < num_processes; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time,
            processes[i].burst_time, processes[i].waiting_time, processes[i].response_time);
    }
    printf("Average waiting time: %.2f\n", avg_waiting_time);
    printf("Average response time: %.2f\n", avg_response_time);
    printf("Throughput: %.2f\n", throughput);

    free(processes);
    return 0;
}